from dataclasses import dataclass, field
from datetime import datetime, date, timedelta
from enum import Enum
from functools import cache
import pickle
from io import BytesIO
from typing import cast, Iterable, Any

import discord
from dateutil import parser
from discord import commands  # uwaga, zwyk≈Çe commands, nie discord.ext.commands
from discord.ext import tasks

# ------------------------- STA≈ÅE

# Format: ID roli, ID serwera
EDYTOR = 931891996577103892, 885830592665628702
DEV = 938146467749707826, 885830592665628702

# ------------------------- STRUKTURY DANYCH


class PolskiDateParser(parser.parserinfo):
    """Klasa rozszerzajƒÖca parserinfo z dateutil.
    Pozwala ona na wprowadzanie dat w polskim formacie."""

    MONTHS = [
        ('sty', 'stycznia', 'stycze≈Ñ', 'styczen', 'I'),
        ('lut', 'lutego', 'luty', 'II'),
        ('mar', 'marca', 'marzec', 'III'),
        ('kwi', 'kwietnia', 'kwiecie≈Ñ', 'kwiecien', 'IV'),
        ('maj', 'maja', 'V'),
        ('cze', 'czerwca', 'czerwiec', 'VI'),
        ('lip', 'lipca', 'lipiec', 'VII'),
        ('sie', 'sierpnia', 'sierpie≈Ñ', 'sierpien', 'VIII'),
        ('wrz', 'wrze≈õnia', 'wrzesnia', 'wrzesie≈Ñ', 'wrzesien', 'IX'),
        ('pa≈∫', 'pa≈∫dziernika', 'paz', 'pazdziernika', 'pa≈∫dziernik', 'pazdziernik', 'X'),
        ('lis', 'listopada', 'listopad', 'XI'),
        ('gru', 'grudnia', 'grudzie≈Ñ', 'grudzien', 'XII')
    ]

    WEEKDAYS = [
        ('pn', 'poniedzia≈Çek', 'poniedzialek', 'pon', 'po'),
        ('wt', 'wtorek', 'wto'),
        ('≈õr', '≈õroda', 'sr', 'sroda', '≈õro', 'sro'),
        ('cz', 'czwartek', 'czw'),
        ('pt', 'piƒÖtek', 'piatek', 'piƒÖ', 'pia', 'pi'),
        ('sb', 'sobota', 'sob', 'so'),
        ('nd', 'niedziela', 'nie', 'ni', 'ndz')
    ]

    def __init__(self):
        super().__init__(True, False)


class Przedmioty(Enum):
    """Enumeracja wszystkich przedmiot√≥w szkolnych.
    Pierwszy string w warto≈õci danego przedmiotu jest jego nazwƒÖ, drugi - og√≥lnodostƒôpnym emoji (np. flagƒÖ),
    a pozosta≈Çe - customowymi emoji, np. z twarzƒÖ nauczyciela."""

    ANGIELSKI = "Jƒôzyk angielski", "üá¨üáß"
    POLSKI = "Jƒôzyk polski", "üáµüá±"
    MATEMATYKA = "Matematyka", "üßÆ", "üìè"
    RELIGIA = "Religia", "‚úù"
    MATMA_UZUP = "Matematyka uzupe≈ÇniajƒÖca", "üî¢", "üî†"
    INFA_RACZEK = "Informatyka (Raczek)", "üñ•Ô∏è"
    INFA_HERMA = "Informatyka (Herma)", "üíª"
    NIEMIECKI_BABICZ = "Niemiecki (Babicz)", "üá©üá™"
    NIEMIECKI_SYCH = "Niemiecki (Sych)", "üá©üá™"
    WF = "WF", "‚öΩ", "ü•Ö", "ü§æ‚Äç", "üèÄ"
    CHEMIA = "Chemia", "üß™", "üßë‚Äçüî¨"
    FIZYKA = "Fizyka", "üõ∞Ô∏è", "üîå"
    HISTORIA = "Historia", "üè∞"
    PRZEDSIEBIORCZOSC = "Przedsiƒôbiorczo≈õƒá", "üí∞"
    ANGIELSKI_UZUP = "Angielski uzupe≈ÇniajƒÖcy", "üá∫üá∏"
    BIOLOGIA = "Biologia", "üêü", "üçÉ"
    GEOGRAFIA = "Geografia", "üåç"
    WYCHOWAWCZA = "Godzina wychowawcza", "‚úèÔ∏è"
    INNY = "Inne", "‚ùì"

    def __reduce_ex__(self, protocol):
        """Pozwala na skuteczniejsze pamiƒôciowo picklowanie przedmiot√≥w poprzez zapamiƒôtanie tylko nazwy"""
        return getattr, (self.__class__, self.name)

    @property
    def nazwa(self) -> str:
        """Zwraca nazwƒô przedmiotu"""
        return self.value[0]

    @property
    def emoji(self) -> tuple[str]:
        """Zwraca listƒô (tuple) wszystkich emoji danego przedmiotu"""
        return self.value[1:]

    @classmethod
    @cache
    def lista(cls) -> dict[str, Any]:  # Any, bo Przedmioty jeszcze nie sƒÖ zadeklarowane
        """Zwraca dict listy nazw (key) i przedmiot√≥w o tej nazwie (value)"""
        return {cast(str, p.nazwa): p for p in cls}


@dataclass(order=True, unsafe_hash=True)
class ZadanieDomowe:
    """Reprezentuje jedno zadanie domowe"""

    termin: datetime
    przedmiot: Przedmioty
    tresc: str
    task: tasks.Loop = field(hash=False, compare=False, repr=False)

    def stworz_task(self) -> tasks.Loop:
        """Tworzy task, kt√≥rego celem jest usuniƒôcie danego zadania domowego po up≈Çyniƒôciu jego terminu"""

        termin = (self.termin - datetime.now()).total_seconds()

        # Je≈õli nie podano godziny przy tworzeniu zadania, usu≈Ñ je dopiero o godzinie 23:59:30 danego dnia
        if self.termin.hour == 0 and self.termin.minute == 0:
            termin += 86370  # 23*60*60+59*60+30

        # Wykonaj 2 razy, raz po utworzeniu, raz po up≈Çyniƒôciu czasu
        @tasks.loop(seconds=termin, count=2)
        async def usun_zadanie_po_terminie():
            pass

        # Usu≈Ñ zadanie dopiero po prawdziwym up≈Çyniƒôciu czasu
        @usun_zadanie_po_terminie.after_loop
        async def usun_after_loop():
            stan.lista_zadan.remove(self)

        usun_zadanie_po_terminie.start()  # Wystartuj task
        return usun_zadanie_po_terminie

    def __init__(self, termin, przedmiot, tresc):
        """Inicjalizuje zadanie domowe i tworzy task do jego usuniƒôcia"""
        self.tresc = tresc
        self.termin = termin
        self.przedmiot = przedmiot
        self.task = self.stworz_task()

    def __del__(self):
        """Przy destrukcji obiektu ko≈Ñczy te≈º task"""
        self.task.cancel()

    def __getstate__(self) -> tuple:
        """Zapisuje w pickle wszystkie dane zadania domowego opr√≥cz taska"""
        return self.termin, self.przedmiot, self.tresc

    def __setstate__(self, state: tuple):
        """Wczytuje stan obiektu z pickle"""
        self.termin, self.przedmiot, self.tresc = state
        self.task = self.stworz_task()

    @property
    @cache
    def id(self):
        """Zwraca ID zadania, generowane na podstawie hasha zamienionego na system szesnastkowy"""
        return hex(abs(hash(self)))[2:]


@dataclass
class StanBota:
    """Klasa przechowujƒÖca stan bota miƒôdzy uruchomieniami"""

    lista_zadan: list[ZadanieDomowe] = field(default_factory=list)

    @classmethod
    async def zapisz(cls) -> bool:
        """Zapisuje stan bota do pliku i wysy≈Ça go do tw√≥rcy bota"""
        try:
            backup = pickle.dumps(stan, pickle.HIGHEST_PROTOCOL)
            plik = discord.File(BytesIO(backup), f"spis_backup_{int(datetime.now().timestamp())}.pickle")
            await storage.send("", file=plik)
            return True
        except pickle.PickleError:
            print("Nie uda≈Ço siƒô zapisaƒá obiektu jako pickle!")
            return False

    @classmethod
    async def wczytaj(cls) -> bool:
        """Wczytuje stan bota z kana≈Çu prywatnego tw√≥rcy bota"""
        try:
            ostatnia_wiadomosc = (await storage.history(limit=1).flatten())[0]
            if len(ostatnia_wiadomosc.attachments) != 1:
                return False
            dane = await ostatnia_wiadomosc.attachments[0].read()
            global stan
            stan = pickle.loads(dane, fix_imports=False)
            return True
        except pickle.PickleError:
            print("Nie uda≈Ço siƒô wczytaƒá pliku pickle!")
            return False


stan: StanBota
PDP_INSTANCE = PolskiDateParser()
bot = discord.Bot()
storage: discord.DMChannel  # Kana≈Ç do zapisywania/backupowania/wczytywania stanu spisu

# ------------------------- STYLE


def _sorted_spis() -> list[ZadanieDomowe]:
    """Skr√≥t do sorted(lista_zadan), bo PyCharm twierdzi, ≈ºe przekazujƒô z≈Çy typ danych..."""
    return sorted(cast(Iterable, stan.lista_zadan))


def oryginalny(dev: bool) -> dict[str, Any]:
    """Oryginalny styl spisu jeszcze sprzed istnienia tego bota (domy≈õlne)"""

    wiadomosc = ""
    dzien = date.today() - timedelta(days=1)  # Wczoraj
    for zadanie in _sorted_spis():
        # Wy≈õwietlanie dni
        if (data_zadania := zadanie.termin.date()) > dzien:
            wiadomosc += f"\n{PDP_INSTANCE.WEEKDAYS[data_zadania.weekday()][1].capitalize()}, " \
                         f"{data_zadania.day} {PDP_INSTANCE.MONTHS[data_zadania.month - 1][1]}:\n"
            dzien = data_zadania

        # Wypisywane tylko gdy czas by≈Ç podany przy tworzeniu zadania
        czas = f' *(do {zadanie.termin.hour}:{zadanie.termin.minute:02})* ' \
            if not (zadanie.termin.hour == 0 and zadanie.termin.minute == 0) else ""
        # Je≈õli zosta≈Çy w≈ÇƒÖczone "statystyki dla nerd√≥w"
        dodatkowe = f" [ID: {zadanie.id}]" if dev else ""
        emoji = zadanie.przedmiot.emoji[0]

        wiadomosc += f"{emoji}**{zadanie.przedmiot.nazwa}**{emoji}{dodatkowe}:{czas} {zadanie.tresc}\n"

    return {"content": wiadomosc.strip()}


def pythonowe_repr(dev: bool) -> dict[str, Any]:
    """Lista wywo≈Ça≈Ñ Pythonowego repr() na ka≈ºdym zadaniu domowym"""
    return {"content": "\n".join([(f'{zadanie.id}: ' if dev else '') + repr(zadanie) for zadanie in _sorted_spis()])}

# ------------------------- KOMENDY


@bot.slash_command(guild_ids=[EDYTOR[1]], default_permission=False)
@discord.commands.permissions.has_role(*EDYTOR)
async def dodaj_zadanie(
        ctx: commands.ApplicationContext,
        opis: commands.Option(str, "Tre≈õƒá zadania domowego"),
        termin: commands.Option(
            str,
            "Termin zadania domowego, np.: 'poniedzia≈Çek', 'pt 23:59', '21 III 2022'"
        ),
        przedmiot: commands.Option(
            str,
            "Przedmiot szkolny, z kt√≥rego zadane jest zadanie",
            choices=Przedmioty.lista().keys(),
            default=Przedmioty.INNY.nazwa
        )
):
    """Dodaje nowe zadanie do spisu"""

    try:
        data = parser.parse(termin, PDP_INSTANCE)  # Konwertuje datƒô/godzinƒô podanƒÖ przez u≈ºytkownika na datetime
        if data < datetime.now():
            await ctx.respond("Zadanie nie zosta≈Ço zarejestrowane, poniewa≈º podano datƒô z przesz≈Ço≈õci!")
            return
    except (parser.ParserError, ValueError):
        await ctx.respond("WystƒÖpi≈Ç b≈ÇƒÖd przy konwersji daty!")
        return

    # Tworzy obiekt zadania i dodaje do spisu
    nowe_zadanie = ZadanieDomowe(data, Przedmioty.lista()[przedmiot], opis)
    stan.lista_zadan.append(nowe_zadanie)
    await ctx.respond(f"Dodano nowe zadanie!\nID: {nowe_zadanie.id}")


@bot.slash_command(guild_ids=[EDYTOR[1]], default_permission=False)
@discord.commands.permissions.has_role(*EDYTOR)
async def usun_zadanie(
        ctx: commands.ApplicationContext,
        id_zadania: commands.Option(str, "ID zadania do usuniƒôcia")
):
    """Usuwa zadanie o podanym ID ze spisu"""

    id_zadania = id_zadania.lower()
    znaleziono = None
    for zadanie in stan.lista_zadan:
        if zadanie.id == id_zadania:
            znaleziono = zadanie
            break

    if not znaleziono:
        await ctx.respond("Nie znaleziono zadania o podanym ID!")
        return

    znaleziono.task.cancel()
    stan.lista_zadan.remove(znaleziono)
    await ctx.respond("Usuniƒôto zadanie!")


@bot.slash_command()
async def spis(
        ctx: commands.ApplicationContext,
        dodatkowe_opcje: commands.Option(
            str,
            "Pozwala na w≈ÇƒÖczenie dodatkowej opcji formatowania lub wys≈Çania wiadomo≈õci",
            choices=["Statystyki dla nerd√≥w", "Wy≈õlij wiadomo≈õƒá jako widocznƒÖ dla wszystkich", "Brak"],
            default="Brak"
        )
):
    """Wy≈õwietla aktualny stan spisu"""

    styl = oryginalny
    wynik = styl(dodatkowe_opcje == "Statystyki dla nerd√≥w")
    if len(wynik) == 1 and "content" in wynik and not wynik["content"]:
        await ctx.respond("Spis jest aktualnie pusty!",
                          ephemeral=(dodatkowe_opcje != "Wy≈õlij wiadomo≈õƒá jako widocznƒÖ dla wszystkich"))
    else:
        await ctx.respond(ephemeral=(dodatkowe_opcje != "Wy≈õlij wiadomo≈õƒá jako widocznƒÖ dla wszystkich"), **wynik)


@bot.slash_command(guild_ids=[DEV[1]], default_permission=False)
@discord.commands.permissions.has_role(*DEV)
async def zapisz_stan(ctx: commands.ApplicationContext):
    """Zapisuje stan bota do pliku i wysy≈Ça go do tw√≥rcy bota"""

    sukces = await StanBota.zapisz()
    await ctx.respond(f"Zapisywanie{'' if sukces else ' nie'} powiod≈Ço siƒô!", ephemeral=True)


@bot.slash_command(guild_ids=[DEV[1]], default_permission=False)
@discord.commands.permissions.has_role(*DEV)
async def wczytaj_stan(ctx: commands.ApplicationContext):
    """Wczytuje stan bota z kana≈Çu prywatnego tw√≥rcy bota (liczy siƒô tylko ostatnia wiadomo≈õƒá)"""

    sukces = await StanBota.wczytaj()
    await ctx.respond(f"Wczytywanie{'' if sukces else ' nie'} powiod≈Ço siƒô!", ephemeral=True)

# ------------------------- START BOTA


@bot.event
async def on_ready():
    """Wykonywane przy starcie bota"""
    print(f"Zalogowano jako {bot.user}!")

    # Inicjalizacja kana≈Çu przechowywania backupu i pr√≥ba wczytania
    global storage
    owner = (await bot.application_info()).owner
    storage = owner.dm_channel or await owner.create_dm()
    if await StanBota.wczytaj():
        print("Pomy≈õlnie wczytano backup!")
    else:
        global stan
        stan = StanBota()  # Stw√≥rz stan bota, je≈õli nie istnieje


def main(token: str):
    """Startuje bota zajmujƒÖcego siƒô spisem zada≈Ñ domowych"""
    bot.run(token)


if __name__ == '__main__':
    from sys import argv
    from os import environ
    # Token jest wczytywany ze zmiennej ≈õrodowiskowej lub pierwszego argumentu podanego przy uruchamianiu
    main(environ.get("SpisToken") or argv[1])
