import logging
import pickle
import re
from dataclasses import dataclass, field
from datetime import datetime, date, timedelta
from enum import Enum
from functools import cache, total_ordering
from io import BytesIO
from os import getenv
from sys import stdout
from typing import cast, Iterable, Any, List

import discord
from dateutil.parser import parserinfo, ParserError, parser
from dateutil.relativedelta import relativedelta
from discord import commands  # Uwaga, zwyk≈Çe commands, nie discord.ext.commands
from discord.ext import tasks

# ------------------------- LOGGING

logger = logging.getLogger("spis")
LOGGER_FORMAT_DATY = "%d.%m.%y %H:%M:%S"
logging.basicConfig(
    level=getenv("Spis_LogLevel", "INFO").upper(),  # Poziom logowania
    style="{",
    format="[{asctime} {levelname} {name}/{funcName}] {message}",  # Format log√≥w
    datefmt=LOGGER_FORMAT_DATY,  # Format daty
    stream=stdout  # Miejsce logowania: standardowe wyj≈õcie
)

# ------------------------- STA≈ÅE


def _wczytaj_role_z_env(nazwa: str):
    """Wczytuje dane o roli z os.environ.
    Format: <id_roli>:<id_serwera>"""
    try:
        s = getenv(f"Spis_{nazwa}")
        if not s:
            logger.warning(f"Nie ustawiono zmiennej ≈õrodowiskowej Spis_{nazwa}! Takie zachowanie nie by≈Ço testowane!")
            return None, None
        s = s.split(":")
        ret = tuple(map(int, s))
        logger.debug(f"Wczytano zmiennƒÖ ≈õrodowiskowƒÖ Spis_{nazwa}: {ret}")
        return ret
    except IndexError:
        logger.warning(f"ZmiennƒÖ ≈õrodowiskowƒÖ Spis_{nazwa} podano w z≈Çym formacie!")
        return None, None


EDYTOR = _wczytaj_role_z_env("Edytor")
DEV = _wczytaj_role_z_env("Dev")

# ------------------------- STRUKTURY DANYCH


class PolskiDateParser(parserinfo, parser):
    """Klasa rozszerzajƒÖca parser i przy okazji parserinfo z dateutil.
    Pozwala ona na wprowadzanie dat w polskim formacie."""

    MONTHS = [
        ('sty', 'stycznia', 'stycze≈Ñ', 'styczen', 'I'),
        ('lut', 'lutego', 'luty', 'II'),
        ('mar', 'marca', 'marzec', 'III'),
        ('kwi', 'kwietnia', 'kwiecie≈Ñ', 'kwiecien', 'IV'),
        ('maj', 'maja', 'V'),
        ('cze', 'czerwca', 'czerwiec', 'VI'),
        ('lip', 'lipca', 'lipiec', 'VII'),
        ('sie', 'sierpnia', 'sierpie≈Ñ', 'sierpien', 'VIII'),
        ('wrz', 'wrze≈õnia', 'wrzesnia', 'wrzesie≈Ñ', 'wrzesien', 'IX'),
        ('pa≈∫', 'pa≈∫dziernika', 'paz', 'pazdziernika', 'pa≈∫dziernik', 'pazdziernik', 'X'),
        ('lis', 'listopada', 'listopad', 'XI'),
        ('gru', 'grudnia', 'grudzie≈Ñ', 'grudzien', 'XII')
    ]

    WEEKDAYS = [
        ('pn', 'poniedzia≈Çek', 'poniedzialek', 'pon', 'po'),
        ('wt', 'wtorek', 'wto'),
        ('≈õr', '≈õroda', 'sr', 'sroda', '≈õro', 'sro'),
        ('cz', 'czwartek', 'czw'),
        ('pt', 'piƒÖtek', 'piatek', 'piƒÖ', 'pia', 'pi'),
        ('sb', 'sobota', 'sob', 'so'),
        ('nd', 'niedziela', 'nie', 'ni', 'ndz')
    ]

    def __init__(self):
        parserinfo.__init__(self, True, False)  # Poprawne ustawienie formatu DD.MM.RR
        parser.__init__(self, self)  # Ustawienie parserinfo na self

    # noinspection PyMethodMayBeStatic
    def _build_naive(self, res, default: datetime):
        """Nadpisane, aby naprawiƒá problem z datami w przesz≈Ço≈õci"""
        logging.debug(f"Parsowanie daty - surowe dane: {res}")
        replacement = {}
        for attr in ("year", "month", "day", "hour", "minute", "second", "microsecond"):
            if (v := getattr(res, attr)) is not None:  # Note to self: nie zapominaƒá o nawiasie w walrusie
                replacement[attr] = v

        default = default.replace(**replacement)
        now = datetime.now()

        if res.weekday is not None:
            if res.day is None:
                default += timedelta(days=1)  # Nie pozwalamy na zwr√≥cenie dzisiaj
            # Znajduje nastƒôpny oczekiwany przez u≈ºytkownika dzie≈Ñ tygodnia
            default += timedelta(days=(res.weekday + 7 - default.weekday()) % 7)

        if default < now:  # Naprawa b≈Çƒôdu z datƒÖ w przesz≈Ço≈õci zamiast z najbli≈ºszƒÖ datƒÖ
            if res.hour is not None and res.day is None and res.weekday is None:
                default += timedelta(days=1)
            elif res.day is not None and res.month is None:
                default += relativedelta(months=1)
            elif res.month is not None and res.year is None:
                default += relativedelta(years=1)

        logging.debug(f"Parsowanie daty - wynik: {default}")
        return default


@total_ordering
class Przedmioty(Enum):
    """Enumeracja wszystkich przedmiot√≥w szkolnych.
    Pierwszy string w warto≈õci danego przedmiotu jest jego nazwƒÖ, drugi - og√≥lnodostƒôpnym emoji (np. flagƒÖ),
    a pozosta≈Çe - customowymi emoji, np. z twarzƒÖ nauczyciela."""

    ANGIELSKI = "Angielski", "üá¨üáß"
    POLSKI = "Polski", "üáµüá±"
    MATEMATYKA = "Matematyka", "üßÆ", "üìè"
    RELIGIA = "Religia", "‚úù"
    MATMA_UZUP = "Matematyka uzupe≈ÇniajƒÖca", "üî¢", "üî†"
    INFA_RACZEK = "Informatyka (Raczek)", "üñ•Ô∏è"
    INFA_HERMA = "Informatyka (Herma)", "üíª"
    NIEMIECKI_BABICZ = "Niemiecki (Babicz)", "üá©üá™"
    NIEMIECKI_SYCH = "Niemiecki (Sych)", "üá©üá™"
    WF = "WF", "‚öΩ", "ü•Ö", "ü§æ‚Äç", "üèÄ"
    CHEMIA = "Chemia", "üß™", "üßë‚Äçüî¨"
    FIZYKA = "Fizyka", "üõ∞Ô∏è", "üîå"
    HISTORIA = "Historia", "üè∞"
    PRZEDSIEBIORCZOSC = "Przedsiƒôbiorczo≈õƒá", "üí∞"
    ANGIELSKI_UZUP = "Angielski uzupe≈ÇniajƒÖcy", "üá∫üá∏"
    BIOLOGIA = "Biologia", "üêü", "üçÉ"
    GEOGRAFIA = "Geografia", "üåç"
    WYCHOWAWCZA = "Godzina wychowawcza", "‚úèÔ∏è"
    INNY = "Inne", "‚ùì"

    def __reduce_ex__(self, protocol):
        """Pozwala na skuteczniejsze pamiƒôciowo picklowanie przedmiot√≥w poprzez zapamiƒôtanie tylko nazwy"""
        return getattr, (self.__class__, self.name)

    def __lt__(self, inny):
        """Przedmiot jest mniejszy od drugiego, gdy jego nazwa alfabetycznie jest mniejsza"""
        return self.nazwa < inny.nazwa

    @property
    def nazwa(self) -> str:
        """Zwraca nazwƒô przedmiotu"""
        return self.value[0]

    @property
    def emoji(self) -> tuple[str]:
        """Zwraca listƒô (tuple) wszystkich emoji danego przedmiotu"""
        return self.value[1:]

    @classmethod
    @cache
    def lista(cls) -> dict[str, Any]:  # Any, bo Przedmioty jeszcze nie sƒÖ zadeklarowane
        """Zwraca dict listy nazw (key) i przedmiot√≥w o tej nazwie (value)"""
        return {cast(str, p.nazwa): p for p in cls}


# Regex do znajdowania wszystkich link√≥w w tre≈õci zadania
LINK_REGEX = re.compile(
    r"(https?://[a-zA-Z0-9-._~:/?#\[\]@!$&'()*+,;=%]*[a-zA-Z0-9-_~:/?#\[\]@!$&'()*+;=%])"
)


@dataclass(order=True, unsafe_hash=True)
class ZadanieDomowe:
    """Reprezentuje jedno zadanie domowe"""

    termin: datetime
    przedmiot: Przedmioty
    tresc: str
    task: tasks.Loop = field(hash=False, compare=False, repr=False)

    @staticmethod
    def popraw_linki(tekst: str) -> str:
        """Poprawia podany tekst tak, aby linki nie generowa≈Çy poglƒÖd√≥w przy wypisywaniu spisu.
        Zasada dzia≈Çania: gdy link znajduje siƒô w nawiasach ostrokƒÖtnych, nie generuje on embed√≥w."""
        # \1 oznacza backtracking do 1 grupy ka≈ºdego matcha, czyli do ca≈Çego linku
        ret = LINK_REGEX.sub(r"<\1>", tekst)
        logger.debug(f'Poprawianie link√≥w: {repr(tekst)} na {repr(ret)}')
        return ret

    def stworz_task(self) -> tasks.Loop:
        """Tworzy task, kt√≥rego celem jest usuniƒôcie danego zadania domowego po up≈Çyniƒôciu jego terminu"""

        termin = (self.termin - datetime.now()).total_seconds() + 5  # 5 sekund p√≥≈∫niej, just to be sure

        # Je≈õli nie podano godziny przy tworzeniu zadania, usu≈Ñ je dopiero o godzinie 23:59:30 danego dnia
        if self.termin.hour == 0 and self.termin.minute == 0:
            termin += 86370  # 23*60*60+59*60+30

        # Wykonaj 2 razy, raz po utworzeniu, raz po up≈Çyniƒôciu czasu
        @tasks.loop(seconds=termin, count=2)
        async def usun_zadanie_po_terminie():
            if self.termin < datetime.now():  # Upewnij siƒô, ≈ºe to ju≈º czas
                bot.stan.lista_zadan.remove(self)

        usun_zadanie_po_terminie.start()  # Wystartuj task
        return usun_zadanie_po_terminie

    def __init__(self, termin, przedmiot, tresc):
        """Inicjalizuje zadanie domowe i tworzy task do jego usuniƒôcia"""
        self.tresc = self.popraw_linki(tresc)
        self.termin = termin
        self.przedmiot = przedmiot
        self.task = self.stworz_task()

    def __del__(self):
        """Przy destrukcji obiektu ko≈Ñczy te≈º task"""
        self.task.cancel()

    def __getstate__(self) -> tuple:
        """Zapisuje w pickle wszystkie dane zadania domowego opr√≥cz taska"""
        return self.termin, self.przedmiot, self.tresc

    def __setstate__(self, state: tuple):
        """Wczytuje stan obiektu z pickle"""
        self.termin, self.przedmiot, self.tresc = state
        self.task = self.stworz_task()

    @property
    @cache
    def id(self):
        """Zwraca ID zadania, generowane na podstawie hasha zamienionego na system szesnastkowy"""
        return hex(abs(hash(self)))[2:]


@dataclass
class StanBota:
    """Klasa przechowujƒÖca stan bota miƒôdzy uruchomieniami"""

    lista_zadan: list[ZadanieDomowe] = field(default_factory=list)


class SpisBot(discord.Bot):
    """Rozszerzenie podstawowego bota o potrzebne metody"""

    async def register_command(self, command: discord.ApplicationCommand, force: bool = True,
                               guild_ids: List[int] = None) -> None:
        """Musia≈Çem to zaimplementowaƒá, bo nie chcia≈Ço siƒô tego zrobiƒá tw√≥rcom pycorda..."""
        for guild in guild_ids:
            await self.register_commands([command], guild, force)

    def __init__(self, *args, **kwargs):
        """Inicjalizacja zmiennych"""
        super().__init__(*args, **kwargs)

        self.backup_kanal: discord.DMChannel | None = None  # Kana≈Ç do zapisywania/backupowania/wczytywania stanu spisu
        self.stan: StanBota | None = None
        self.autosave = True  # Auto-zapis przy wy≈ÇƒÖczaniu i auto-wczytywanie przy w≈ÇƒÖczaniu

    async def zapisz(self) -> None:
        """Zapisuje stan bota do pliku i wysy≈Ça go do tw√≥rcy bota"""
        try:
            backup = pickle.dumps(self.stan, pickle.HIGHEST_PROTOCOL)
            plik = discord.File(BytesIO(backup), f"spis_backup_{int(datetime.now().timestamp())}.pickle")
            await self.backup_kanal.send("", file=plik)
            logger.info(f"Pomy≈õlnie zapisano plik {plik.filename} na kanale {repr(self.backup_kanal)}")
            logger.debug(f"Zapisane dane: {repr(self.stan)}")
        except pickle.PickleError as e:
            logger.exception("Nie uda≈Ço siƒô zapisaƒá stanu jako obiekt pickle!", exc_info=e)

    async def wczytaj(self) -> None:
        """Wczytuje stan bota z kana≈Çu prywatnego tw√≥rcy bota"""
        try:
            ostatnia_wiadomosc = (await self.backup_kanal.history(limit=1).flatten())[0]
            if len(ostatnia_wiadomosc.attachments) != 1:
                logger.warning(f"Ostatnia wiadomo≈õƒá na kanale {repr(self.backup_kanal)} mia≈Ça z≈ÇƒÖ ilo≈õƒá za≈ÇƒÖcznik√≥w, "
                               f"porzucono wczytywanie stanu!")
                return
            dane = await ostatnia_wiadomosc.attachments[0].read()
            self.stan = pickle.loads(dane, fix_imports=False)

            # Usu≈Ñ zadania z przesz≈Ço≈õci
            for zadanie in list(self.stan.lista_zadan):
                if zadanie.termin < datetime.now():
                    self.stan.lista_zadan.remove(zadanie)

            # Wczytanie czasu, skƒÖd pochodzi backup
            try:
                czas_backupu = datetime.fromtimestamp(int(ostatnia_wiadomosc.attachments[0].filename[12:-7]))
            except (OSError, ValueError):  # B≈ÇƒÖd parsowania
                czas_backupu = ostatnia_wiadomosc.created_at

            logger.info(f"Pomy≈õlnie wczytano backup z {czas_backupu.strftime(LOGGER_FORMAT_DATY)} "
                        f"z kana≈Çu {repr(self.backup_kanal)}")
            logger.debug(f"Zapisane dane: {repr(self.stan)}")
        except (pickle.PickleError, IndexError) as e:
            logger.exception("Nie uda≈Ço siƒô wczytaƒá pliku pickle!", exc_info=e)
            self.stan = StanBota()

    async def on_ready(self):
        """Wykonywane przy starcie bota"""
        logger.info(f"Zalogowano jako {self.user}!")

        # Inicjalizacja kana≈Çu przechowywania backupu
        wlasciciel = (await self.application_info()).owner
        self.backup_kanal = wlasciciel.dm_channel or await wlasciciel.create_dm()
        if self.autosave:
            await self.wczytaj()  # Pr√≥ba wczytania
        else:
            self.stan = StanBota()

    async def close(self):
        """Zamyka bota zapisujƒÖc jego stan"""
        if self.autosave:
            await self.zapisz()  # Pr√≥ba zapisu
        await super().close()

# ------------------------- ZMIENNE GLOBALNE


PDP = PolskiDateParser()  # Globalna instancja klasy PolskiDateParser
bot = SpisBot()

# ------------------------- STYLE


def _sorted_spis() -> list[ZadanieDomowe]:
    """Skr√≥t do sorted(lista_zadan), bo PyCharm twierdzi, ≈ºe przekazujƒô z≈Çy typ danych..."""
    return sorted(cast(Iterable, bot.stan.lista_zadan))


def oryginalny(dev: bool) -> dict[str, Any]:
    """Oryginalny styl spisu jeszcze sprzed istnienia tego bota (domy≈õlne)"""

    wiadomosc = ""
    dzien = date.today() - timedelta(days=1)  # Wczoraj
    for zadanie in _sorted_spis():
        # Wy≈õwietlanie dni
        if (data_zadania := zadanie.termin.date()) > dzien:
            wiadomosc += f"\n{PDP.WEEKDAYS[data_zadania.weekday()][1].capitalize()}, " \
                         f"{data_zadania.day} {PDP.MONTHS[data_zadania.month - 1][1]}" \
                         f"{f' {rok}' if (rok := data_zadania.year) != date.today().year else ''}:\n"
            dzien = data_zadania

        # Wypisywane tylko gdy czas by≈Ç podany przy tworzeniu zadania
        czas = f' *(do {zadanie.termin.hour}:{zadanie.termin.minute:02})* ' \
            if not (zadanie.termin.hour == 0 and zadanie.termin.minute == 0) else ""
        # Je≈õli zosta≈Çy w≈ÇƒÖczone "statystyki dla nerd√≥w"
        dodatkowe = f" [ID: {zadanie.id}]" if dev else ""
        emoji = zadanie.przedmiot.emoji[0]

        wiadomosc += f"{emoji}**{zadanie.przedmiot.nazwa}**{emoji}{dodatkowe}:{czas} {zadanie.tresc}\n"

    return {"content": wiadomosc.strip()}


def pythonowe_repr(dev: bool) -> dict[str, Any]:
    """Lista wywo≈Ça≈Ñ Pythonowego repr() na ka≈ºdym zadaniu domowym"""
    return {"content": "\n".join([(f'{zadanie.id}: ' if dev else '') + repr(zadanie) for zadanie in _sorted_spis()])}

# ------------------------- KOMENDY


@bot.slash_command(guild_ids=[EDYTOR[1]], default_permission=False)
@discord.commands.permissions.has_role(*EDYTOR)
async def dodaj_zadanie(
        ctx: commands.ApplicationContext,
        opis: commands.Option(str, "Tre≈õƒá zadania domowego"),
        termin: commands.Option(
            str,
            "Termin zadania domowego, np.: 'poniedzia≈Çek', 'pt 23:59', '21 III 2022'"
        ),
        przedmiot: commands.Option(
            str,
            "Przedmiot szkolny, z kt√≥rego zadane jest zadanie",
            choices=Przedmioty.lista().keys(),
            default=Przedmioty.INNY.nazwa
        )
):
    """Dodaje nowe zadanie do spisu"""

    try:
        data = PDP.parse(termin)  # Konwertuje datƒô/godzinƒô podanƒÖ przez u≈ºytkownika na datetime
        if data < datetime.now():
            logger.debug(f'U≈ºytkownik {repr(ctx.author)} poda≈Ç datƒô z przesz≈Ço≈õci: '
                         f'{repr(termin)} -> {data.strftime(LOGGER_FORMAT_DATY)}')
            await ctx.respond("Zadanie nie zosta≈Ço zarejestrowane, poniewa≈º podano datƒô z przesz≈Ço≈õci!")
            return
    except (ParserError, ValueError) as e:
        logger.debug(f'U≈ºytkownik {repr(ctx.author)} poda≈Ç datƒô w niepoprawnym formacie: {repr(termin)}', exc_info=e)
        await ctx.respond("WystƒÖpi≈Ç b≈ÇƒÖd przy konwersji daty!")
        return

    # Tworzy obiekt zadania i dodaje do spisu
    nowe_zadanie = ZadanieDomowe(data, Przedmioty.lista()[przedmiot], opis)
    bot.stan.lista_zadan.append(nowe_zadanie)
    logger.info(f"Dodano nowe zadanie: {repr(nowe_zadanie)}")
    await ctx.respond(f"Dodano nowe zadanie!\nID: {nowe_zadanie.id}")


@bot.slash_command(guild_ids=[EDYTOR[1]], default_permission=False)
@discord.commands.permissions.has_role(*EDYTOR)
async def usun_zadanie(
        ctx: commands.ApplicationContext,
        id_zadania: commands.Option(str, "ID zadania do usuniƒôcia")
):
    """Usuwa zadanie o podanym ID ze spisu"""

    id_zadania = id_zadania.lower()
    znaleziono = None
    for zadanie in bot.stan.lista_zadan:
        if zadanie.id == id_zadania:
            znaleziono = zadanie
            break

    if not znaleziono:
        logger.debug(f'U≈ºytkownik {repr(ctx.author)} chcia≈Ç usunƒÖƒá nieistniejƒÖce zadanie o ID {repr(id_zadania)}')
        await ctx.respond("Nie znaleziono zadania o podanym ID!")
        return

    znaleziono.task.cancel()
    bot.stan.lista_zadan.remove(znaleziono)
    logger.info(f'U≈ºytkownik {repr(ctx.author)} usunƒÖ≈Ç zadanie: {repr(znaleziono)}')
    await ctx.respond("Usuniƒôto zadanie!")


@bot.slash_command()
async def spis(
        ctx: commands.ApplicationContext,
        dodatkowe_opcje: commands.Option(
            str,
            "Pozwala na w≈ÇƒÖczenie dodatkowej opcji formatowania lub wys≈Çania wiadomo≈õci",
            choices=["Statystyki dla nerd√≥w", "Wy≈õlij wiadomo≈õƒá jako widocznƒÖ dla wszystkich", "Brak"],
            default="Brak"
        )
):
    """Wy≈õwietla aktualny stan spisu"""

    styl = oryginalny
    wynik = styl(dodatkowe_opcje == "Statystyki dla nerd√≥w")
    if len(wynik) == 1 and "content" in wynik and not wynik["content"]:
        await ctx.respond("Spis jest aktualnie pusty!",
                          ephemeral=(dodatkowe_opcje != "Wy≈õlij wiadomo≈õƒá jako widocznƒÖ dla wszystkich"))
    else:
        await ctx.respond(ephemeral=(dodatkowe_opcje != "Wy≈õlij wiadomo≈õƒá jako widocznƒÖ dla wszystkich"), **wynik)
    logger.debug(f"U≈ºytkownik {repr(ctx.author)} wy≈õwietli≈Ç spis{f' ({dodatkowe_opcje})' if dodatkowe_opcje else ''}")


@bot.slash_command(guild_ids=[DEV[1]], default_permission=False)
@discord.commands.permissions.has_role(*DEV)
async def zapisz_stan(ctx: commands.ApplicationContext):
    """Zapisuje stan bota do pliku i wysy≈Ça go do tw√≥rcy bota"""

    sukces = await bot.zapisz()
    await ctx.respond(f"Zapisanie siƒô{'' if sukces else ' nie'} powiod≈Ço!", ephemeral=True)


@bot.slash_command(guild_ids=[DEV[1]], default_permission=False)
@discord.commands.permissions.has_role(*DEV)
async def wczytaj_stan(ctx: commands.ApplicationContext):
    """Wczytuje stan bota z kana≈Çu prywatnego tw√≥rcy bota (liczy siƒô tylko ostatnia wiadomo≈õƒá)"""

    sukces = await bot.wczytaj()
    await ctx.respond(f"Wczytanie siƒô{'' if sukces else ' nie'} powiod≈Ço!", ephemeral=True)

# ------------------------- START BOTA


def main():
    """Startuje bota zajmujƒÖcego siƒô spisem zada≈Ñ domowych, wczytujƒÖc token z os.environ"""
    token = getenv("Spis_Token")
    if not token:
        logger.critical('Nie uda≈Ço siƒô odnale≈∫ƒá tokena! Podaj go w zmiennej ≈õrodowiskowej "Spis_Token"')
        return

    bot.autosave = getenv("Spis_Autosave", "t").lower() in ("true", "t", "yes", "y", "1", "on", "prawda", "p", "tak")
    logger.debug(f"Autosave: {bot.autosave}")
    bot.run(token)


if __name__ == '__main__':
    main()
